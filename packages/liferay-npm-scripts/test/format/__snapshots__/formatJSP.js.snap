// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`formatJSP() formatting entire fixtures configuration.jsp matches snapshot 1`] = `
"<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%@ include file=\\"/image_gallery_display/init.jsp\\" %>

<%
DLPortletInstanceSettingsHelper dlPortletInstanceSettingsHelper = new DLPortletInstanceSettingsHelper(igRequestHelper);
%>

<liferay-portlet:actionURL portletConfiguration=\\"<%= true %>\\" var=\\"configurationActionURL\\" />

<liferay-portlet:renderURL portletConfiguration=\\"<%= true %>\\" var=\\"configurationRenderURL\\" />

<liferay-frontend:edit-form
	action=\\"<%= configurationActionURL %>\\"
	method=\\"post\\"
	name=\\"fm\\"
	onSubmit='<%= \\"event.preventDefault(); \\" + renderResponse.getNamespace() + \\"saveConfiguration();\\" %>'
>
	<aui:input name=\\"<%= Constants.CMD %>\\" type=\\"hidden\\" value=\\"<%= Constants.UPDATE %>\\" />
	<aui:input name=\\"redirect\\" type=\\"hidden\\" value=\\"<%= configurationRenderURL %>\\" />
	<aui:input name=\\"preferences--mimeTypes--\\" type=\\"hidden\\" />
	<aui:input name=\\"preferences--rootFolderId--\\" type=\\"hidden\\" value=\\"<%= rootFolderId %>\\" />

	<liferay-frontend:edit-form-body>
		<liferay-ui:error key=\\"rootFolderIdInvalid\\" message=\\"please-enter-a-valid-root-folder\\" />

		<liferay-frontend:fieldset-group>
			<liferay-frontend:fieldset
				collapsible=\\"<%= true %>\\"
				id=\\"imageGalleryDisplayDisplay\\"
				label=\\"display-settings\\"
			>
				<aui:input label=\\"show-actions\\" name=\\"preferences--showActions--\\" type=\\"checkbox\\" value=\\"<%= dlPortletInstanceSettings.isShowActions() %>\\" />

				<aui:field-wrapper label=\\"show-media-type\\">
					<liferay-ui:input-move-boxes
						leftBoxName=\\"currentMimeTypes\\"
						leftList=\\"<%= dlPortletInstanceSettingsHelper.getCurrentMimeTypes() %>\\"
						leftReorder=\\"<%= Boolean.TRUE.toString() %>\\"
						leftTitle=\\"current\\"
						rightBoxName=\\"availableMimeTypes\\"
						rightList=\\"<%= dlPortletInstanceSettingsHelper.getAvailableMimeTypes() %>\\"
						rightTitle=\\"available\\"
					/>
				</aui:field-wrapper>

				<div class=\\"display-template\\">
					<liferay-ddm:template-selector
						className=\\"<%= FileEntry.class.getName() %>\\"
						displayStyle=\\"<%= displayStyle %>\\"
						displayStyleGroupId=\\"<%= displayStyleGroupId %>\\"
						refreshURL=\\"<%= configurationRenderURL %>\\"
						showEmptyOption=\\"<%= true %>\\"
					/>
				</div>
			</liferay-frontend:fieldset>

			<liferay-frontend:fieldset
				collapsible=\\"<%= true %>\\"
				id=\\"imageGalleryDisplayFoldersListingPanel\\"
				label=\\"folders-listing\\"
			>
				<aui:field-wrapper>
					<div class=\\"form-group\\">
						<aui:input label=\\"root-folder\\" name=\\"rootFolderName\\" type=\\"resource\\" value=\\"<%= rootFolderName %>\\" />

						<aui:button name=\\"openFolderSelectorButton\\" value=\\"select\\" />

						<%
						String taglibRemoveFolder = \\"Liferay.Util.removeEntitySelection('rootFolderId', 'rootFolderName', this, '\\" + renderResponse.getNamespace() + \\"');\\";
						%>

						<aui:button disabled=\\"<%= rootFolderId <= 0 %>\\" name=\\"removeFolderButton\\" onClick=\\"<%= taglibRemoveFolder %>\\" value=\\"remove\\" />
					</div>
				</aui:field-wrapper>
			</liferay-frontend:fieldset>
		</liferay-frontend:fieldset-group>
	</liferay-frontend:edit-form-body>

	<liferay-frontend:edit-form-footer>
		<aui:button type=\\"submit\\" />

		<aui:button type=\\"cancel\\" />
	</liferay-frontend:edit-form-footer>
</liferay-frontend:edit-form>

<script>
	var openFolderSelectorButton = document.getElementById(
		'<portlet:namespace />openFolderSelectorButton'
	);

	if (openFolderSelectorButton) {
		openFolderSelectorButton.addEventListener('click', function(event) {
			Liferay.Util.selectEntity(
				{
					dialog: {
						constrain: true,
						destroyOnHide: true,
						modal: true,
						width: 680
					},
					id: '_<%= HtmlUtil.escapeJS(portletResource) %>_selectFolder',
					title:
						'<liferay-ui:message arguments=\\"folder\\" key=\\"select-x\\" />',

					<liferay-portlet:renderURL portletName=\\"<%= portletResource %>\\" var=\\"selectFolderURL\\" windowState=\\"<%= LiferayWindowState.POP_UP.toString() %>\\">
							<portlet:param name=\\"mvcRenderCommandName\\" value='<%= \\"/document_library/select_folder\\" %>' />
							<portlet:param name=\\"folderId\\" value=\\"<%= String.valueOf(rootFolderId) %>\\" />
							<portlet:param name=\\"ignoreRootFolder\\" value=\\"<%= Boolean.TRUE.toString() %>\\" />
						</liferay-portlet:renderURL>

					uri: '<%= HtmlUtil.escapeJS(selectFolderURL.toString()) %>'
				},
				function(event) {
					var folderData = {
						idString: 'rootFolderId',
						idValue: event.folderid,
						nameString: 'rootFolderName',
						nameValue: event.foldername
					};

					Liferay.Util.selectFolder(folderData, '<portlet:namespace />');
				}
			);
		});
	}

	function <portlet:namespace />saveConfiguration() {
		var form = document.<portlet:namespace />fm;

		Liferay.Util.postForm(form, {
			data: {
				mimeTypes: Liferay.Util.listSelect(
					Liferay.Util.getFormElement(form, 'currentMimeTypes')
				)
			}
		});
	}
</script>"
`;

exports[`formatJSP() formatting entire fixtures edit_template_display.jspf matches snapshot 1`] = `
"<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String scriptContent = ParamUtil.getString(request, \\"scriptContent\\");

if (Validator.isNotNull(scriptContent)) {
	script = scriptContent;
}
%>

<aui:input cssClass=\\"hide\\" label=\\"\\" name=\\"scriptContent\\" type=\\"textarea\\" value=\\"<%= script %>\\" />

<liferay-ui:panel-container
	extended=\\"<%= true %>\\"
	id=\\"templateScriptContainer\\"
	markupView=\\"lexicon\\"
	persistState=\\"<%= true %>\\"
>
	<liferay-ui:panel
		collapsible=\\"<%= true %>\\"
		extended=\\"<%= true %>\\"
		id=\\"templateScriptSectionPanel\\"
		markupView=\\"lexicon\\"
		persistState=\\"<%= true %>\\"
		title=\\"script\\"
	>
		<div class=\\"form-group lfr-template-editor-container\\">
			<c:if test=\\"<%= ddmDisplayContext.isAutocompleteEnabled(language) %>\\">
				<div class=\\"lfr-template-palette-container pull-left\\" id=\\"<portlet:namespace />templatePaletteContainer\\">
					<div class=\\"search\\" id=\\"<portlet:namespace />paletteSearchContainer\\">
						<input class=\\"col-md-12 field form-control search-query\\" id=\\"<portlet:namespace />paletteSearch\\" placeholder=\\"<liferay-ui:message key=\\"search\\" />\\" type=\\"text\\" />
					</div>

					<div class=\\"lfr-template-palette\\" id=\\"<portlet:namespace />paletteDataContainer\\">
						<div id=\\"<portlet:namespace />paletteData\\">

							<%
							long templateHandlerClassNameId = ddmDisplay.getTemplateHandlerClassNameId(template, classNameId);

							Map<String, TemplateVariableGroup> templateVariableGroups = TemplateContextHelper.getTemplateVariableGroups(templateHandlerClassNameId, classPK, language, locale);

							TemplateHandler templateHandler = TemplateHandlerRegistryUtil.getTemplateHandler(templateHandlerClassNameId);

							Class<?> clazz = ddmDisplay.getClass();

							if (templateHandler != null) {
								clazz = templateHandler.getClass();
							}

							Bundle bundle = FrameworkUtil.getBundle(clazz);

							ResourceBundleLoader resourceBundleLoader = ResourceBundleLoaderUtil.getResourceBundleLoaderByBundleSymbolicName(bundle.getSymbolicName());

							if (resourceBundleLoader == null) {
								resourceBundleLoader = new AggregateResourceBundleLoader(ResourceBundleUtil.getResourceBundleLoader(\\"content.Language\\", clazz.getClassLoader()), LanguageResources.RESOURCE_BUNDLE_LOADER);
							}

							ResourceBundle templateHandlerResourceBundle = resourceBundleLoader.loadResourceBundle(locale);

							for (TemplateVariableGroup templateVariableGroup : templateVariableGroups.values()) {
								if (templateVariableGroup.isEmpty()) {
									continue;
								}
							%>

								<liferay-ui:panel
									collapsible=\\"<%= true %>\\"
									cssClass=\\"palette-section\\"
									extended=\\"<%= false %>\\"
									id=\\"<%= HtmlUtil.getAUICompatibleId(templateVariableGroup.getLabel()) %>\\"
									title=\\"<%= LanguageUtil.get(request, templateHandlerResourceBundle, HtmlUtil.escape(templateVariableGroup.getLabel())) %>\\"
								>
									<ul class=\\"palette-item-content\\">

										<%
										for (TemplateVariableDefinition templateVariableDefinition : templateVariableGroup.getTemplateVariableDefinitions()) {
										%>

											<li class=\\"palette-item-container\\">
												<span class=\\"palette-item\\" data-content=\\"<%= HtmlUtil.escapeAttribute(_getDataContent(templateVariableDefinition, language)) %>\\" data-title=\\"<%= HtmlUtil.escapeAttribute(_getPaletteItemTitle(request, templateHandlerResourceBundle, templateVariableDefinition)) %>\\">
													<%= HtmlUtil.escape(LanguageUtil.get(request, templateHandlerResourceBundle, templateVariableDefinition.getLabel())) %>

													<c:if test=\\"<%= templateVariableDefinition.isCollection() || templateVariableDefinition.isRepeatable() %>\\">*</c:if>
												</span>
											</li>

										<%
										}
										%>

									</ul>
								</liferay-ui:panel>

							<%
							}
							%>

						</div>
					</div>
				</div>
			</c:if>

			<%
			String editorContainerClass = \\"lfr-editor-container\\";

			if (!ddmDisplayContext.isAutocompleteEnabled(language)) {
				editorContainerClass += \\" lfr-editor-container-full\\";
			}
			%>

			<div class=\\"<%= editorContainerClass %>\\" id=\\"<portlet:namespace />editorContainer\\">
				<div class=\\"lfr-rich-editor\\" id=\\"<portlet:namespace />richEditor\\"></div>
			</div>
		</div>

		<aui:input inlineLabel=\\"left\\" label=\\"script-file\\" name=\\"script\\" type=\\"file\\" />
	</liferay-ui:panel>
</liferay-ui:panel-container>

<aui:script use=\\"aui-ace-autocomplete-freemarker,aui-ace-autocomplete-plugin,aui-ace-autocomplete-velocity,aui-toggler,aui-tooltip,autocomplete-base,autocomplete-filters,event-mouseenter,event-outside,liferay-util-window,resize,transition\\">
	var ACPlugin = A.Plugin.AceAutoComplete;
	var AObject = A.Object;
	var Util = Liferay.Util;

	var STR_EMPTY = '';

	var STR_HEIGHT = 'height';

	var selectLanguageNode = A.one('#<portlet:namespace />language');

	var panelScriptContainer = A.one('#templateScriptContainer');

	if (Util.getTop() !== A.config.win) {
		var dialog = Util.getWindow();

		if (dialog && A.Lang.isFunction(dialog._detachUIHandlesAutohide)) {
			dialog._detachUIHandlesAutohide();

			if (dialog.iframe) {
				dialog.iframe.set('closeOnEscape', false);
			}
		}
	}

	var prevEditorContent;
	var richEditor;

	<c:if test=\\"<%= ddmDisplayContext.isAutocompleteEnabled(language) %>\\">
		var paletteContainer = panelScriptContainer.one(
			'#<portlet:namespace />templatePaletteContainer'
		);
		var paletteDataContainer = panelScriptContainer.one(
			'#<portlet:namespace />paletteDataContainer'
		);

		function createLiveSearch() {
			var PaletteSearch = A.Component.create({
				AUGMENTS: [A.AutoCompleteBase],

				EXTENDS: A.Base,

				NAME: 'searchpalette',

				prototype: {
					initializer: function() {
						var instance = this;

						instance._bindUIACBase();
						instance._syncUIACBase();
					}
				}
			});

			var getItems = function() {
				var results = [];

				paletteItems.each(function(item, index) {
					results.push({
						data: item.text().trim(),
						node: item.ancestor()
					});
				});

				return results;
			};

			var getNoResultsNode = function() {
				if (!noResultsNode) {
					noResultsNode = A.Node.create(
						'<div class=\\"alert\\"><%= UnicodeLanguageUtil.get(request, \\"there-are-no-results\\") %></div>'
					);
				}

				return noResultsNode;
			};

			var paletteItems = paletteDataContainer.all('.palette-item');
			var paletteSectionsNode = paletteDataContainer.all('.palette-section');

			var noResultsNode;

			var paletteSearch = new PaletteSearch({
				inputNode: '#<portlet:namespace />paletteSearch',
				minQueryLength: 0,
				nodes: '.palette-item-container',
				resultFilters: 'phraseMatch',
				resultTextLocator: 'data',
				source: getItems()
			});

			paletteSearch.on('results', function(event) {
				paletteItems.each(function(item, index) {
					item.ancestor().addClass('hide');
				});

				event.results.forEach(function(item, index) {
					item.raw.node.removeClass('hide');
				});

				var foundVisibleSection;

				paletteSectionsNode.each(function(item, index) {
					var visibleItem = item.one('.palette-item-container:not(.hide)');

					if (visibleItem) {
						foundVisibleSection = true;
					}

					item.toggleClass('hide', !visibleItem);
				});

				var noResultsNode = getNoResultsNode();

				if (foundVisibleSection) {
					noResultsNode.remove();
				} else {
					paletteDataContainer.appendChild(noResultsNode);
				}
			});
		}

		function onPaletteItemChosen(event) {
			var editor = richEditor.getEditor();

			var item = event.currentTarget;

			var aceAutocomplete = richEditor['ace-autocomplete-plugin'];

			aceAutocomplete._lockEditor = true;

			var content = item.attr('data-content');

			var fragments = content.split('[$CURSOR$]');

			var cursorPos;
			var processed;

			AObject.each(fragments, function(item, index) {
				if (processed) {
					cursorPos = editor.getCursorPosition();
				}

				processed = true;

				editor.insert(item);
			});

			if (cursorPos) {
				editor.moveCursorToPosition(cursorPos);
			}

			editor.focus();

			aceAutocomplete._lockEditor = false;
		}
	</c:if>

	function getEditorContent() {
		var content = richEditor.getSession().getValue();

		return content;
	}

	var paletteSearchContainer = panelScriptContainer.one(
		'#<portlet:namespace />paletteSearchContainer'
	);

	function resizeEditor(event) {
		var info = event.info;

		richEditor.set(STR_HEIGHT, info.offsetHeight);
		richEditor.set('width', info.offsetWidth);

		if (!Util.isPhone()) {
			paletteDataContainer.setStyle(
				STR_HEIGHT,
				info.offsetHeight - paletteSearchContainer.height()
			);
		}
	}

	function setEditorContent(content) {
		richEditor.getSession().setValue(content);

		prevEditorContent = content;
	}

	function setEditorPlugins(event) {
		var AutoComplete;

		<c:choose>
			<c:when test=\\"<%= language.equals(TemplateConstants.LANG_TYPE_FTL) %>\\">
				AutoComplete = A.AceEditor.AutoCompleteFreemarker;
			</c:when>
			<c:when test=\\"<%= language.equals(TemplateConstants.LANG_TYPE_VM) %>\\">
				AutoComplete = A.AceEditor.AutoCompleteVelocity;
			</c:when>
		</c:choose>

		if (AutoComplete) {
			var processor = new AutoComplete({
				variables: <%= ddmDisplayContext.getAutocompleteJSON(request, language) %>
			});

			if (processor) {
				richEditor.unplug(ACPlugin);

				richEditor.plug(ACPlugin, {
					processor: processor,
					render: true,
					visible: false,
					zIndex: 10000
				});
			} else {
				richEditor.unplug(ACPlugin);
			}
		}
	}

	<%
	String langType = ParamUtil.getString(request, \\"langType\\");
	%>

	var editorContentElement = A.one('#<portlet:namespace />scriptContent');

	var editorNode = A.one('#<portlet:namespace />richEditor');

	A.on(
		'domready',
		function(event) {
			richEditor = new A.AceEditor({
				boundingBox: editorNode,
				height: 400,
				mode: '<%= EditorModeUtil.getEditorMode(langType) %>',
				width: '100%'
			}).render();

			new A.Resize({
				handles: ['br'],
				node: editorNode,
				on: {
					resize: resizeEditor
				}
			});

			if (editorContentElement) {
				setEditorContent(editorContentElement.val());
			}

			Liferay.on('<portlet:namespace />saveTemplate', function(event) {
				editorContentElement.val(getEditorContent());
			});

			selectLanguageNode.on('change', function(event) {
				Liferay.fire('<portlet:namespace />refreshEditor');
			});

			setEditorPlugins();

			<c:if test=\\"<%= ddmDisplayContext.isAutocompleteEnabled(language) %>\\">
				paletteContainer.delegate(
					'click',
					onPaletteItemChosen,
					'.palette-item'
				);

				new A.TogglerDelegate({
					animated: true,
					container: paletteDataContainer,
					content: '.palette-item-content',
					header: '.palette-item-header'
				});

				new A.TooltipDelegate({
					align: {
						points: [A.WidgetPositionAlign.LC, A.WidgetPositionAlign.RC]
					},
					duration: 0.5,
					html: true,
					position: 'right',
					trigger:
						'#<portlet:namespace />templatePaletteContainer .palette-item',
					visible: false,
					zIndex: 6
				});

				createLiveSearch();
			</c:if>
		},
		'#<portlet:namespace />richEditor'
	);

	Liferay.on('<portlet:namespace />refreshEditor', function(event) {
		var form = A.one('#<portlet:namespace />fm');

		<portlet:renderURL var=\\"refreshTemplateURL\\">
				<portlet:param name=\\"mvcPath\\" value=\\"/edit_template.jsp\\" />
			</portlet:renderURL>

		form.attr('action', '<%= refreshTemplateURL %>');

		if (
			richEditor
				.getEditor()
				.getSession()
				.getUndoManager()
				.hasUndo()
		) {
			Liferay.fire('<portlet:namespace />saveTemplate');
		}
		<c:if test=\\"<%= template == null %>\\">
			else {
				editorContentElement.val(STR_EMPTY);
			}
		</c:if>

		submitForm(form, null, null, false);
	});
</aui:script>

<%!
private String _getAccessor(String accessor, String language) {
	if (StringUtil.equalsIgnoreCase(language, \\"vm\\")) {
		if (!accessor.contains(StringPool.OPEN_PARENTHESIS)) {
			return accessor;
		}

		StringTokenizer st = new StringTokenizer(accessor, \\"(,\\");

		StringBundler sb = new StringBundler(st.countTokens() * 2);

		sb.append(st.nextToken());
		sb.append(StringPool.OPEN_PARENTHESIS);

		while (st.hasMoreTokens()) {
			sb.append(StringPool.DOLLAR);
			sb.append(st.nextToken());
		}

		accessor = sb.toString();
	}

	return accessor;
}

private String _getDataContent(TemplateVariableDefinition templateVariableDefinition, String language) {
	String dataContent = StringPool.BLANK;

	String dataType = templateVariableDefinition.getDataType();

	if (templateVariableDefinition.isCollection()) {
		TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition();

		dataContent = _getListCode(templateVariableDefinition.getName(), itemTemplateVariableDefinition.getName(), itemTemplateVariableDefinition.getAccessor(), language);
	}
	else if (Validator.isNull(dataType)) {
		dataContent = _getVariableReferenceCode(templateVariableDefinition.getName(), templateVariableDefinition.getAccessor(), language);
	}
	else if (dataType.equals(\\"service-locator\\")) {
		Class<?> templateVariableDefinitionClass = templateVariableDefinition.getClazz();

		String variableName = templateVariableDefinitionClass.getSimpleName();

		StringBundler sb = new StringBundler(3);

		sb.append(_getVariableAssignmentCode(variableName, \\"serviceLocator.findService(\\\\\\"\\" + templateVariableDefinition.getName() + \\"\\\\\\")\\", language));
		sb.append(\\"[$CURSOR$]\\");
		sb.append(_getVariableReferenceCode(variableName, null, language));

		dataContent = sb.toString();
	}
	else {
		try {
			String[] generateCode = templateVariableDefinition.generateCode(language);

			dataContent = generateCode[0];
		}
		catch (Exception e) {
			_log.error(e, e);
		}
	}

	return dataContent;
}

private String _getListCode(String variableName, String itemName, String accessor, String language) {
	if (StringUtil.equalsIgnoreCase(language, \\"ftl\\")) {
		StringBundler sb = new StringBundler(10);

		sb.append(\\"<#if \\");
		sb.append(variableName);
		sb.append(\\"?has_content>\\\\n\\\\t<#list \\");
		sb.append(variableName);
		sb.append(\\" as \\");
		sb.append(itemName);
		sb.append(\\">\\\\n\\\\t\\\\t\\");
		sb.append(_getVariableReferenceCode(itemName, accessor, language));
		sb.append(\\"[$CURSOR$]\\");
		sb.append(\\"\\\\n\\\\t</#list>\\\\n</#if>\\");

		return sb.toString();
	}
	else if (StringUtil.equalsIgnoreCase(language, \\"vm\\")) {
		StringBundler sb = new StringBundler(10);

		sb.append(\\"#if (!$\\");
		sb.append(variableName);
		sb.append(\\".isEmpty())\\\\n\\\\t#foreach ($\\");
		sb.append(itemName);
		sb.append(\\" in $\\");
		sb.append(variableName);
		sb.append(\\")\\\\n\\\\t\\\\t\\");
		sb.append(_getVariableReferenceCode(itemName, accessor, language));
		sb.append(\\"[$CURSOR$]\\");
		sb.append(\\"#end\\\\n#end\\");

		return sb.toString();
	}

	return StringPool.BLANK;
}

private String _getPaletteItemTitle(HttpServletRequest request, String label, Class<?> clazz) {
	StringBundler sb = new StringBundler(10);

	if (clazz == null) {
		return StringPool.BLANK;
	}

	String className = clazz.getName();

	sb.append(\\"<br />\\");
	sb.append(LanguageUtil.get(request, label));
	sb.append(StringPool.COLON);
	sb.append(\\"&nbsp;\\");

	String javadocURL = null;

	if (className.startsWith(\\"com.liferay.portal.kernel\\")) {
		javadocURL = \\"http://docs.liferay.com/portal/7.0/javadocs/portal-kernel/\\";
	}

	if (Validator.isNotNull(javadocURL)) {
		sb.append(\\"<a href=\\\\\\"\\");
		sb.append(javadocURL);
		sb.append(StringUtil.replace(className, CharPool.PERIOD, CharPool.SLASH));
		sb.append(\\".html\\\\\\" target=\\\\\\"_blank\\\\\\">\\");
	}

	sb.append(clazz.getSimpleName());

	if (Validator.isNull(javadocURL)) {
		sb.append(\\"</a>\\");
	}

	return sb.toString();
}

private String _getPaletteItemTitle(HttpServletRequest request, ResourceBundle resourceBundle, TemplateVariableDefinition templateVariableDefinition) {
	StringBundler sb = new StringBundler(12);

	String help = templateVariableDefinition.getHelp();

	if (Validator.isNotNull(help)) {
		sb.append(\\"<p>\\");
		sb.append(HtmlUtil.escape(LanguageUtil.get(request, resourceBundle, help)));
		sb.append(\\"</p>\\");
	}

	if (templateVariableDefinition.isCollection()) {
		sb.append(\\"<p><i>*\\");
		sb.append(LanguageUtil.get(request, \\"this-is-a-collection-of-fields\\"));
		sb.append(\\"</i></p>\\");
	}
	else if (templateVariableDefinition.isRepeatable()) {
		sb.append(\\"<p><i>*\\");
		sb.append(LanguageUtil.get(request, \\"this-is-a-repeatable-field\\"));
		sb.append(\\"</i></p>\\");
	}

	if (!Objects.equals(templateVariableDefinition.getDataType(), \\"service-locator\\")) {
		sb.append(LanguageUtil.get(request, \\"variable\\"));
		sb.append(StringPool.COLON);
		sb.append(\\"&nbsp;\\");
		sb.append(HtmlUtil.escape(templateVariableDefinition.getName()));
	}

	sb.append(_getPaletteItemTitle(request, \\"class\\", templateVariableDefinition.getClazz()));

	if (templateVariableDefinition.isCollection()) {
		TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition();

		sb.append(_getPaletteItemTitle(request, \\"items-class\\", itemTemplateVariableDefinition.getClazz()));
	}

	return sb.toString();
}

private String _getVariableAssignmentCode(String variableName, String variableValue, String language) {
	if (StringUtil.equalsIgnoreCase(language, \\"ftl\\")) {
		return \\"<#assign \\" + variableName + \\" = \\" + variableValue + \\">\\";
	}
	else if (StringUtil.equalsIgnoreCase(language, \\"vm\\")) {
		if (!variableValue.startsWith(StringPool.DOUBLE_QUOTE) && !variableValue.startsWith(StringPool.OPEN_BRACKET) && !variableValue.startsWith(StringPool.OPEN_CURLY_BRACE) && !variableValue.startsWith(StringPool.QUOTE) && !Validator.isNumber(variableValue)) {
			variableValue = StringPool.DOLLAR + variableValue;
		}

		return \\"#set ($\\" + variableName + \\" = \\" + variableValue + \\")\\";
	}

	return variableName;
}

private String _getVariableReferenceCode(String variableName, String accessor, String language) {
	String methodInvocation = StringPool.BLANK;

	if (Validator.isNotNull(accessor)) {
		methodInvocation = StringPool.PERIOD + _getAccessor(accessor, language);
	}

	if (StringUtil.equalsIgnoreCase(language, \\"ftl\\")) {
		return \\"\${\\" + variableName + methodInvocation + \\"}\\";
	}
	else if (StringUtil.equalsIgnoreCase(language, \\"vm\\")) {
		return \\"$\\" + variableName + methodInvocation;
	}

	return variableName;
}
%>

<%!
private static Log _log = LogFactoryUtil.getLog(\\"com_liferay_dynamic_data_mapping_web.edit_template_display_jspf\\");
%>
"
`;

exports[`formatJSP() formatting entire fixtures page.jsp matches snapshot 1`] = `
"<!DOCTYPE html>
<html>
<head>
	<title>Test Check Source Formatting</title>
</head>
<body>
	<!-- Sort attribute values -->
	<div class=\\"foo bar\\"></div>
	<aui:nav cssClass=\\"bar abc\\"></aui:nav>

	<!-- Sort attributes -->
	<div id=\\"foo\\" class=\\"foo\\"></div>
	<div id=\\"foo\\" class=\\"foo <%= bar ? \\"bar\\" : \\"abc\\" %>\\"></div>
	<img id=\\"foo\\" class=\\"foo <%= bar ? \\"bar\\" : \\"abc\\" %>\\" />
	<aui:nav id=\\"nav\\" cssClass=\\"bar abc\\"></aui:nav>
	<aui:nav id='<%= \\"nav\\" %>' cssClass='<%= \\"bar abc\\" %>'></aui:nav>
	<span><liferay-ui:message key=\\"count\\" /> <liferay-ui:message key=\\"used-in-x-assets\\" arguments=\\"<%= tag.getAssetCount() %>\\" /></span>

	<!-- Common -->
	<!-- Invalid space -->
	<img src=\\"foo\\" />
	<!-- Mixed spaces and tabs -->
	 <div class=\\"foo\\"></div>

	<!-- Script tags -->
	<script type=\\"text\\">
		var testVar = true;
	</script>

	<aui:script>
		var testVar = true;
	</aui:script>

	<aui:script use=\\"aui-base,event,node\\">
		var Liferay = true;

		Liferay.Language.get('foo');

		Liferay.provide(window, 'testFn', function() {
			var foo = false;
		});
	</aui:script>

	<aui:script>
		<%
		List<String> foo = null;
		%>

		foo();
	</aui:script>

	<aui:script use=\\"event\\"></aui:script>

	<!-- attributes with JS -->
	<aui:nav href=\\"javascript:alert(1);\\" onClick=\\"alert(2);\\"></aui:nav>

	<!-- Style Blocks -->
	<style>
		.foo {
			border: none;
		}
	</style>

	<style></style>

	<!-- Sort attribute values JSTL -->
	<div class=\\"tab tab-title \${currentTab == tab ? 'active' : ''}\\"></div>
	<aui:nav cssClass=\\"\${currentTab == tab ? 'active' : ''} abc foo\\"></aui:nav>
	<aui:nav cssClass=\\"\${currentTab == tab ? 'active' : ''} foo abc <%= \\\\\\"scriptletblock\\\\\\" %>\\"></aui:nav>

	<style>
		.foo {
			border: none;
		}</style>

	<aui:script>
		window.foo = 'foo';
</aui:script>

	<aui:script>
		var SOME_OBJ = {
			\${foo}: 'bar',
			\${bar}: 'baz'
		};
	</aui:script>

	<aui:script require=\\"foo/bar/baz, baz/foo_bar, bar/baz/foo as FooBar\\">
		alert(fooBarBaz);
		alert(bazFoo_bar);
		alert(FooBar);
	</aui:script>

	<aui:script require=\\"\\">
</aui:script>
</body>
</html>
"
`;

exports[`formatJSP() formatting entire fixtures recaptcha.jsp matches snapshot 1`] = `null`;

exports[`formatJSP() formatting entire fixtures roles.jsp matches snapshot 1`] = `
"<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%@ include file=\\"/init.jsp\\" %>

<%
User selUser = userDisplayContext.getSelectedUser();

List<Group> groups = new ArrayList<>();

groups.addAll(userDisplayContext.getGroups());
groups.addAll(userDisplayContext.getInheritedSites());

List<Organization> organizations = userDisplayContext.getOrganizations();
Long[] organizationIds = UsersAdminUtil.getOrganizationIds(organizations);
List<Role> roles = userDisplayContext.getRoles();
List<UserGroupRole> organizationRoles = userDisplayContext.getOrganizationRoles();
List<UserGroupRole> siteRoles = userDisplayContext.getSiteRoles();
List<UserGroupGroupRole> inheritedSiteRoles = userDisplayContext.getInheritedSiteRoles();
List<Group> roleGroups = userDisplayContext.getRoleGroups();

currentURLObj.setParameter(\\"historyKey\\", renderResponse.getNamespace() + \\"roles\\");

String regularRoleSyncEntitiesEventName = liferayPortletResponse.getNamespace() + \\"syncRegularRoles\\";
String siteRoleSyncEntitiesEventName = liferayPortletResponse.getNamespace() + \\"syncSiteRoles\\";
String organizationRoleSyncEntitiesEventName = liferayPortletResponse.getNamespace() + \\"syncOrganizationRoles\\";
%>

<liferay-ui:error-marker
	key=\\"<%= WebKeys.ERROR_SECTION %>\\"
	value=\\"roles\\"
/>

<liferay-ui:membership-policy-error />

<liferay-util:buffer
	var=\\"removeRoleIcon\\"
>
	<liferay-ui:icon
		icon=\\"times-circle\\"
		markupView=\\"lexicon\\"
		message=\\"remove\\"
	/>
</liferay-util:buffer>

<aui:input name=\\"addGroupRolesGroupIds\\" type=\\"hidden\\" />
<aui:input name=\\"addGroupRolesRoleIds\\" type=\\"hidden\\" />
<aui:input name=\\"addRoleIds\\" type=\\"hidden\\" />
<aui:input name=\\"deleteGroupRolesGroupIds\\" type=\\"hidden\\" />
<aui:input name=\\"deleteGroupRolesRoleIds\\" type=\\"hidden\\" />
<aui:input name=\\"deleteRoleIds\\" type=\\"hidden\\" />

<div class=\\"sheet-section\\">
	<h3 class=\\"autofit-row sheet-subtitle\\">
		<span class=\\"autofit-col autofit-col-expand\\">
			<span class=\\"heading-text\\"><liferay-ui:message key=\\"regular-roles\\" /></span>
		</span>

		<c:if test=\\"<%= !portletName.equals(myAccountPortletId) %>\\">
			<span class=\\"autofit-col\\">
				<span class=\\"heading-end\\">
					<liferay-ui:icon
						cssClass=\\"modify-link\\"
						id=\\"selectRegularRoleLink\\"
						label=\\"<%= true %>\\"
						linkCssClass=\\"btn btn-secondary btn-sm\\"
						message=\\"select\\"
						method=\\"get\\"
						url=\\"javascript:;\\"
					/>
				</span>
			</span>
		</c:if>
	</h3>

	<liferay-ui:search-container
		compactEmptyResultsMessage=\\"<%= true %>\\"
		cssClass=\\"lfr-search-container-roles\\"
		curParam=\\"regularRolesCur\\"
		emptyResultsMessage=\\"this-user-is-not-assigned-any-regular-roles\\"
		headerNames=\\"title,null\\"
		id=\\"rolesSearchContainer\\"
		iteratorURL=\\"<%= currentURLObj %>\\"
		total=\\"<%= roles.size() %>\\"
	>
		<liferay-ui:search-container-results
			results=\\"<%= roles.subList(searchContainer.getStart(), searchContainer.getResultEnd()) %>\\"
		/>

		<liferay-ui:search-container-row
			className=\\"com.liferay.portal.kernel.model.Role\\"
			keyProperty=\\"roleId\\"
			modelVar=\\"role\\"
		>
			<liferay-ui:search-container-column-text
				cssClass=\\"table-cell-content\\"
				name=\\"title\\"
			>
				<liferay-ui:icon
					iconCssClass=\\"<%= RolesAdminUtil.getIconCssClass(role) %>\\"
					label=\\"<%= true %>\\"
					message=\\"<%= HtmlUtil.escape(role.getTitle(locale)) %>\\"
				/>
			</liferay-ui:search-container-column-text>

			<c:if test=\\"<%= !portletName.equals(myAccountPortletId) && !RoleMembershipPolicyUtil.isRoleRequired(selUser.getUserId(), role.getRoleId()) %>\\">
				<liferay-ui:search-container-column-text>
					<a class=\\"modify-link\\" data-rowId=\\"<%= role.getRoleId() %>\\" href=\\"javascript:;\\"><%= removeRoleIcon %></a>
				</liferay-ui:search-container-column-text>
			</c:if>
		</liferay-ui:search-container-row>

		<liferay-ui:search-iterator
			markupView=\\"lexicon\\"
		/>
	</liferay-ui:search-container>

	<c:if test=\\"<%= !portletName.equals(myAccountPortletId) %>\\">
		<aui:script sandbox=\\"<%= true %>\\">
			var selectRegularRoleLink = document.getElementById(
				'<portlet:namespace />selectRegularRoleLink'
			);

			if (selectRegularRoleLink) {
				selectRegularRoleLink.addEventListener('click', function(event) {
					var searchContainerName = '<portlet:namespace />rolesSearchContainer';

					var searchContainer = Liferay.SearchContainer.get(searchContainerName);

					var searchContainerData = searchContainer.getData();

					if (!searchContainerData.length) {
						searchContainerData = [];
					} else {
						searchContainerData = searchContainerData.split(',');
					}

					Liferay.Util.selectEntity(
						{
							dialog: {
								constrain: true,
								modal: true
							},

							<%
								String regularRoleEventName = liferayPortletResponse.getNamespace() + \\"selectRegularRole\\";
								%>

							id: '<%= regularRoleEventName %>',
							selectedData: searchContainerData,
							title:
								'<liferay-ui:message arguments=\\"regular-role\\" key=\\"select-x\\" />',

							<%
								PortletURL selectRegularRoleURL = PortletProviderUtil.getPortletURL(request, Role.class.getName(), PortletProvider.Action.BROWSE);

								selectRegularRoleURL.setParameter(\\"p_u_i_d\\", (selUser == null) ? \\"0\\" : String.valueOf(selUser.getUserId()));
								selectRegularRoleURL.setParameter(\\"eventName\\", regularRoleEventName);
								selectRegularRoleURL.setParameter(\\"syncEntitiesEventName\\", regularRoleSyncEntitiesEventName);
								selectRegularRoleURL.setWindowState(LiferayWindowState.POP_UP);
								%>

							uri: '<%= selectRegularRoleURL.toString() %>'
						},
						function(event) {
							<portlet:namespace />selectRole(
								event.entityid,
								event.entityname,
								event.searchcontainername,
								event.groupdescriptivename,
								event.groupid,
								event.iconcssclass
							);
						}
					);
				});
			}
		</aui:script>
	</c:if>

	<c:if test=\\"<%= !roleGroups.isEmpty() %>\\">
		<h4 class=\\"sheet-tertiary-title\\"><liferay-ui:message key=\\"inherited-regular-roles\\" /></h4>

		<liferay-ui:search-container
			cssClass=\\"lfr-search-container-inherited-regular-roles\\"
			curParam=\\"inheritedRegularRolesCur\\"
			headerNames=\\"title,group\\"
			id=\\"inheritedRolesSearchContainer\\"
			iteratorURL=\\"<%= currentURLObj %>\\"
			total=\\"<%= roleGroups.size() %>\\"
		>
			<liferay-ui:search-container-results
				results=\\"<%= roleGroups.subList(searchContainer.getStart(), searchContainer.getResultEnd()) %>\\"
			/>

			<liferay-ui:search-container-row
				className=\\"com.liferay.portal.kernel.model.Group\\"
				keyProperty=\\"groupId\\"
				modelVar=\\"group\\"
				rowIdProperty=\\"friendlyURL\\"
			>

				<%
				List<Role> groupRoles = RoleLocalServiceUtil.getGroupRoles(group.getGroupId());
				%>

				<liferay-ui:search-container-column-text
					name=\\"title\\"
					value=\\"<%= HtmlUtil.escape(ListUtil.toString(groupRoles, Role.NAME_ACCESSOR)) %>\\"
				>
					<liferay-ui:icon
						iconCssClass=\\"<%= RolesAdminUtil.getIconCssClass(groupRoles.get(0)) %>\\"
						label=\\"<%= true %>\\"
						message=\\"<%= HtmlUtil.escape(ListUtil.toString(groupRoles, Role.NAME_ACCESSOR)) %>\\"
					/>
				</liferay-ui:search-container-column-text>

				<liferay-ui:search-container-column-text
					name=\\"group\\"
					value=\\"<%= HtmlUtil.escape(group.getDescriptiveName(locale)) %>\\"
				/>
			</liferay-ui:search-container-row>

			<liferay-ui:search-iterator
				markupView=\\"lexicon\\"
			/>
		</liferay-ui:search-container>
	</c:if>
</div>

<div class=\\"sheet-section\\">
	<h3 class=\\"autofit-row sheet-subtitle\\">
		<span class=\\"autofit-col autofit-col-expand\\">
			<span class=\\"heading-text\\"><liferay-ui:message key=\\"organization-roles\\" /></span>
		</span>

		<c:if test=\\"<%= !portletName.equals(myAccountPortletId) && (!organizations.isEmpty() || !organizationRoles.isEmpty()) %>\\">
			<span class=\\"autofit-col\\">
				<span class=\\"heading-end\\">
					<liferay-ui:icon
						cssClass=\\"modify-link\\"
						id=\\"selectOrganizationRoleLink\\"
						label=\\"<%= true %>\\"
						linkCssClass=\\"btn btn-secondary btn-sm\\"
						message=\\"select\\"
						method=\\"get\\"
						url=\\"javascript:;\\"
					/>
				</span>
			</span>
		</c:if>
	</h3>

	<c:if test=\\"<%= organizations.isEmpty() && organizationRoles.isEmpty() %>\\">
		<div class=\\"text-muted\\"><liferay-ui:message key=\\"this-user-does-not-belong-to-an-organization-to-which-an-organization-role-can-be-assigned\\" /></div>
	</c:if>

	<c:if test=\\"<%= !organizations.isEmpty() %>\\">
		<liferay-ui:search-container
			compactEmptyResultsMessage=\\"<%= true %>\\"
			cssClass=\\"lfr-search-container-organization-roles\\"
			curParam=\\"organizationRolesCur\\"
			emptyResultsMessage=\\"this-user-is-not-assigned-any-organization-roles\\"
			headerNames=\\"title,organization,null\\"
			id=\\"organizationRolesSearchContainer\\"
			iteratorURL=\\"<%= currentURLObj %>\\"
			total=\\"<%= organizationRoles.size() %>\\"
		>
			<liferay-ui:search-container-results
				results=\\"<%= organizationRoles.subList(searchContainer.getStart(), searchContainer.getResultEnd()) %>\\"
			/>

			<liferay-ui:search-container-row
				className=\\"com.liferay.portal.kernel.model.UserGroupRole\\"
				keyProperty=\\"roleId\\"
				modelVar=\\"userGroupRole\\"
			>
				<liferay-ui:search-container-column-text
					cssClass=\\"table-cell-content\\"
					name=\\"title\\"
				>
					<liferay-ui:icon
						iconCssClass=\\"<%= RolesAdminUtil.getIconCssClass(userGroupRole.getRole()) %>\\"
						label=\\"<%= true %>\\"
						message=\\"<%= HtmlUtil.escape(userGroupRole.getRole().getTitle(locale)) %>\\"
					/>
				</liferay-ui:search-container-column-text>

				<liferay-ui:search-container-column-text
					cssClass=\\"table-cell-content\\"
					name=\\"organization\\"
					value=\\"<%= HtmlUtil.escape(userGroupRole.getGroup().getDescriptiveName(locale)) %>\\"
				/>

				<%
				boolean membershipProtected = false;

				Group group = userGroupRole.getGroup();

				Role role = userGroupRole.getRole();

				if (role.getType() == RoleConstants.TYPE_ORGANIZATION) {
					membershipProtected = OrganizationMembershipPolicyUtil.isMembershipProtected(permissionChecker, userGroupRole.getUserId(), group.getOrganizationId());
				}
				else {
					membershipProtected = SiteMembershipPolicyUtil.isMembershipProtected(permissionChecker, userGroupRole.getUserId(), group.getGroupId());
				}
				%>

				<c:if test=\\"<%= !portletName.equals(myAccountPortletId) && !membershipProtected %>\\">
					<liferay-ui:search-container-column-text>
						<a class=\\"modify-link\\" data-groupId=\\"<%= userGroupRole.getGroupId() %>\\" data-rowId=\\"<%= userGroupRole.getRoleId() %>\\" href=\\"javascript:;\\"><%= removeRoleIcon %></a>
					</liferay-ui:search-container-column-text>
				</c:if>
			</liferay-ui:search-container-row>

			<liferay-ui:search-iterator
				markupView=\\"lexicon\\"
			/>
		</liferay-ui:search-container>

		<c:if test=\\"<%= !portletName.equals(myAccountPortletId) %>\\">
			<aui:script use=\\"liferay-search-container\\">
				var Util = Liferay.Util;

				var searchContainer = Liferay.SearchContainer.get(
					'<portlet:namespace />organizationRolesSearchContainer'
				);

				var searchContainerContentBox = searchContainer.get('contentBox');

				searchContainerContentBox.delegate(
					'click',
					function(event) {
						var link = event.currentTarget;
						var tr = link.ancestor('tr');

						var groupId = link.getAttribute('data-groupId');
						var rowId = link.getAttribute('data-rowId');

						var selectOrganizationRole = Util.getWindow(
							'<portlet:namespace />selectOrganizationRole'
						);

						if (selectOrganizationRole) {
							var selectButton = selectOrganizationRole.iframe.node
								.get('contentWindow.document')
								.one(
									'.selector-button[data-groupid=\\"' +
										groupId +
										'\\"][data-entityid=\\"' +
										rowId +
										'\\"]'
								);

							Util.toggleDisabled(selectButton, false);
						}

						searchContainer.deleteRow(tr, rowId);

						<portlet:namespace />deleteGroupRole(rowId, groupId);
					},
					'.modify-link'
				);

				Liferay.on('<%= organizationRoleSyncEntitiesEventName %>', function(event) {
					event.selectors.each(function(item, index, collection) {
						var groupId = item.attr('data-groupid');
						var roleId = item.attr('data-entityid');

						for (
							var i = 0;
							i < <portlet:namespace />addGroupRolesGroupIds.length;
							i++
						) {
							if (
								<portlet:namespace />addGroupRolesGroupIds[i] == groupId &&
								<portlet:namespace />addGroupRolesRoleIds[i] == roleId
							) {
								Util.toggleDisabled(item, true);

								break;
							}
						}

						for (
							var j = 0;
							j < <portlet:namespace />deleteGroupRolesGroupIds.length;
							j++
						) {
							if (
								<portlet:namespace />deleteGroupRolesGroupIds[j] == groupId &&
								<portlet:namespace />deleteGroupRolesRoleIds[j] == roleId
							) {
								Util.toggleDisabled(item, false);

								break;
							}
						}
					});
				});
			</aui:script>
		</c:if>
	</c:if>

	<c:if test=\\"<%= !organizations.isEmpty() && !portletName.equals(myAccountPortletId) %>\\">
		<aui:script sandbox=\\"<%= true %>\\">
			var selectOrganizationRoleLink = document.getElementById(
				'<portlet:namespace />selectOrganizationRoleLink'
			);

			if (selectOrganizationRoleLink) {
				selectOrganizationRoleLink.addEventListener('click', function(event) {
					Liferay.Util.selectEntity(
						{
							dialog: {
								constrain: true,
								modal: true
							},

							<%
								String organizationRoleEventName = liferayPortletResponse.getNamespace() + \\"selectOrganizationRole\\";
								%>

							id: '<%= organizationRoleEventName %>',
							selectedData: [],
							title:
								'<liferay-ui:message arguments=\\"organization-role\\" key=\\"select-x\\" />',

							<%
								PortletURL selectOrganizationRoleURL = PortletProviderUtil.getPortletURL(request, Role.class.getName(), PortletProvider.Action.BROWSE);

								selectOrganizationRoleURL.setParameter(\\"p_u_i_d\\", (selUser == null) ? \\"0\\" : String.valueOf(selUser.getUserId()));
								selectOrganizationRoleURL.setParameter(\\"step\\", \\"1\\");
								selectOrganizationRoleURL.setParameter(\\"type\\", String.valueOf(RoleConstants.TYPE_ORGANIZATION));
								selectOrganizationRoleURL.setParameter(\\"organizationIds\\", StringUtil.merge(organizationIds));
								selectOrganizationRoleURL.setParameter(\\"eventName\\", organizationRoleEventName);
								selectOrganizationRoleURL.setParameter(\\"syncEntitiesEventName\\", organizationRoleSyncEntitiesEventName);
								selectOrganizationRoleURL.setWindowState(LiferayWindowState.POP_UP);
								%>

							uri: '<%= selectOrganizationRoleURL.toString() %>'
						},
						function(event) {
							<portlet:namespace />selectRole(
								event.entityid,
								event.entityname,
								event.searchcontainername,
								event.groupdescriptivename,
								event.groupid,
								event.iconcssclass
							);
						}
					);
				});
			}
		</aui:script>
	</c:if>
</div>

<div class=\\"sheet-section\\">
	<h3 class=\\"autofit-row sheet-subtitle\\">
		<span class=\\"autofit-col autofit-col-expand\\">
			<span class=\\"heading-text\\"><liferay-ui:message key=\\"site-roles\\" /></span>
		</span>

		<c:if test=\\"<%= !portletName.equals(myAccountPortletId) && (!groups.isEmpty() || !siteRoles.isEmpty()) %>\\">
			<span class=\\"autofit-col\\">
				<span class=\\"heading-end\\">
					<liferay-ui:icon
						cssClass=\\"modify-link\\"
						id=\\"selectSiteRoleLink\\"
						label=\\"<%= true %>\\"
						linkCssClass=\\"btn btn-secondary btn-sm\\"
						message=\\"select\\"
						method=\\"get\\"
						url=\\"javascript:;\\"
					/>
				</span>
			</span>
		</c:if>
	</h3>

	<c:if test=\\"<%= groups.isEmpty() && siteRoles.isEmpty() %>\\">
		<div class=\\"text-muted\\"><liferay-ui:message key=\\"this-user-does-not-belong-to-a-site-to-which-a-site-role-can-be-assigned\\" /></div>
	</c:if>

	<c:if test=\\"<%= !groups.isEmpty() %>\\">
		<liferay-ui:search-container
			compactEmptyResultsMessage=\\"<%= true %>\\"
			cssClass=\\"lfr-search-container-site-roles\\"
			curParam=\\"siteRolesCur\\"
			emptyResultsMessage=\\"this-user-is-not-assigned-any-site-roles\\"
			headerNames=\\"title,site,null\\"
			id=\\"siteRolesSearchContainer\\"
			iteratorURL=\\"<%= currentURLObj %>\\"
			total=\\"<%= siteRoles.size() %>\\"
		>
			<liferay-ui:search-container-results
				results=\\"<%= siteRoles.subList(searchContainer.getStart(), searchContainer.getResultEnd()) %>\\"
			/>

			<liferay-ui:search-container-row
				className=\\"com.liferay.portal.kernel.model.UserGroupRole\\"
				keyProperty=\\"roleId\\"
				modelVar=\\"userGroupRole\\"
			>
				<liferay-ui:search-container-column-text
					cssClass=\\"table-cell-content\\"
					name=\\"title\\"
				>
					<liferay-ui:icon
						iconCssClass=\\"<%= RolesAdminUtil.getIconCssClass(userGroupRole.getRole()) %>\\"
						label=\\"<%= true %>\\"
						message=\\"<%= HtmlUtil.escape(userGroupRole.getRole().getTitle(locale)) %>\\"
					/>
				</liferay-ui:search-container-column-text>

				<liferay-ui:search-container-column-text
					cssClass=\\"table-cell-content\\"
					name=\\"site\\"
				>
					<liferay-staging:descriptive-name
						group=\\"<%= userGroupRole.getGroup() %>\\"
					/>
				</liferay-ui:search-container-column-text>

				<%
				boolean membershipProtected = false;

				Group group = userGroupRole.getGroup();

				Role role = userGroupRole.getRole();

				if (role.getType() == RoleConstants.TYPE_ORGANIZATION) {
					membershipProtected = OrganizationMembershipPolicyUtil.isMembershipProtected(permissionChecker, userGroupRole.getUserId(), group.getOrganizationId());
				}
				else {
					membershipProtected = SiteMembershipPolicyUtil.isMembershipProtected(permissionChecker, userGroupRole.getUserId(), group.getGroupId());
				}
				%>

				<c:if test=\\"<%= !portletName.equals(myAccountPortletId) && !membershipProtected %>\\">
					<liferay-ui:search-container-column-text>
						<a class=\\"modify-link\\" data-groupId=\\"<%= userGroupRole.getGroupId() %>\\" data-rowId=\\"<%= userGroupRole.getRoleId() %>\\" href=\\"javascript:;\\"><%= removeRoleIcon %></a>
					</liferay-ui:search-container-column-text>
				</c:if>
			</liferay-ui:search-container-row>

			<liferay-ui:search-iterator
				markupView=\\"lexicon\\"
			/>
		</liferay-ui:search-container>

		<c:if test=\\"<%= !portletName.equals(myAccountPortletId) %>\\">
			<aui:script use=\\"liferay-search-container\\">
				var Util = Liferay.Util;

				var searchContainer = Liferay.SearchContainer.get(
					'<portlet:namespace />siteRolesSearchContainer'
				);

				var searchContainerContentBox = searchContainer.get('contentBox');

				searchContainerContentBox.delegate(
					'click',
					function(event) {
						var link = event.currentTarget;
						var tr = link.ancestor('tr');

						var groupId = link.getAttribute('data-groupId');
						var rowId = link.getAttribute('data-rowId');

						var selectSiteRole = Util.getWindow(
							'<portlet:namespace />selectSiteRole'
						);

						if (selectSiteRole) {
							var selectButton = selectSiteRole.iframe.node
								.get('contentWindow.document')
								.one(
									'.selector-button[data-groupid=\\"' +
										groupId +
										'\\"][data-entityid=\\"' +
										rowId +
										'\\"]'
								);

							Util.toggleDisabled(selectButton, false);
						}

						searchContainer.deleteRow(tr, rowId);

						<portlet:namespace />deleteGroupRole(rowId, groupId);
					},
					'.modify-link'
				);

				Liferay.on('<%= siteRoleSyncEntitiesEventName %>', function(event) {
					event.selectors.each(function(item, index, collection) {
						var groupId = item.attr('data-groupid');
						var roleId = item.attr('data-entityid');

						for (
							var k = 0;
							k < <portlet:namespace />addGroupRolesGroupIds.length;
							k++
						) {
							if (
								<portlet:namespace />addGroupRolesGroupIds[k] == groupId &&
								<portlet:namespace />addGroupRolesRoleIds[k] == roleId
							) {
								Util.toggleDisabled(item, true);

								break;
							}
						}

						for (
							var n = 0;
							n < <portlet:namespace />deleteGroupRolesGroupIds.length;
							n++
						) {
							if (
								<portlet:namespace />deleteGroupRolesGroupIds[n] == groupId &&
								<portlet:namespace />deleteGroupRolesRoleIds[n] == roleId
							) {
								Util.toggleDisabled(item, false);

								break;
							}
						}
					});
				});

				A.one('#<portlet:namespace />selectSiteRoleLink').on('click', function(event) {
					Util.selectEntity(
						{
							dialog: {
								constrain: true,
								modal: true
							},

							<%
								String siteRoleEventName = liferayPortletResponse.getNamespace() + \\"selectSiteRole\\";
								%>

							id: '<%= siteRoleEventName %>',
							selectedData: [],
							title:
								'<liferay-ui:message arguments=\\"site-role\\" key=\\"select-x\\" />',

							<%
								PortletURL selectSiteRoleURL = PortletProviderUtil.getPortletURL(request, Role.class.getName(), PortletProvider.Action.BROWSE);

								selectSiteRoleURL.setParameter(\\"p_u_i_d\\", (selUser == null) ? \\"0\\" : String.valueOf(selUser.getUserId()));
								selectSiteRoleURL.setParameter(\\"step\\", \\"1\\");
								selectSiteRoleURL.setParameter(\\"type\\", String.valueOf(RoleConstants.TYPE_SITE));
								selectSiteRoleURL.setParameter(\\"eventName\\", siteRoleEventName);
								selectSiteRoleURL.setParameter(\\"syncEntitiesEventName\\", siteRoleSyncEntitiesEventName);
								selectSiteRoleURL.setWindowState(LiferayWindowState.POP_UP);
								%>

							uri: '<%= selectSiteRoleURL.toString() %>'
						},
						function(event) {
							<portlet:namespace />selectRole(
								event.entityid,
								event.entityname,
								event.searchcontainername,
								event.groupdescriptivename,
								event.groupid,
								event.iconcssclass
							);
						}
					);
				});
			</aui:script>
		</c:if>
	</c:if>

	<c:if test=\\"<%= !inheritedSiteRoles.isEmpty() %>\\">
		<h4 class=\\"sheet-tertiary-title\\"><liferay-ui:message key=\\"inherited-site-roles\\" /></h4>

		<liferay-ui:search-container
			cssClass=\\"lfr-search-container-inherited-site-roles\\"
			curParam=\\"inheritedSiteRolesCur\\"
			headerNames=\\"title,site,user-group\\"
			id=\\"inheritedSiteRolesSearchContainer\\"
			iteratorURL=\\"<%= currentURLObj %>\\"
			total=\\"<%= inheritedSiteRoles.size() %>\\"
		>
			<liferay-ui:search-container-results
				results=\\"<%= inheritedSiteRoles.subList(searchContainer.getStart(), searchContainer.getResultEnd()) %>\\"
			/>

			<liferay-ui:search-container-row
				className=\\"com.liferay.portal.kernel.model.UserGroupGroupRole\\"
				keyProperty=\\"roleId\\"
				modelVar=\\"userGroupGroupRole\\"
			>
				<liferay-ui:search-container-column-text
					cssClass=\\"table-cell-content\\"
					name=\\"title\\"
				>
					<liferay-ui:icon
						iconCssClass=\\"<%= RolesAdminUtil.getIconCssClass(userGroupGroupRole.getRole()) %>\\"
						label=\\"<%= true %>\\"
						message=\\"<%= HtmlUtil.escape(userGroupGroupRole.getRole().getTitle(locale)) %>\\"
					/>
				</liferay-ui:search-container-column-text>

				<liferay-ui:search-container-column-text
					cssClass=\\"table-cell-content\\"
					name=\\"site\\"
				>
					<liferay-staging:descriptive-name
						group=\\"<%= userGroupGroupRole.getGroup() %>\\"
					/>
				</liferay-ui:search-container-column-text>

				<liferay-ui:search-container-column-text
					cssClass=\\"table-cell-content\\"
					name=\\"user-group\\"
					value=\\"<%= HtmlUtil.escape(userGroupGroupRole.getUserGroup().getName()) %>\\"
				/>
			</liferay-ui:search-container-row>

			<liferay-ui:search-iterator
				markupView=\\"lexicon\\"
			/>
		</liferay-ui:search-container>
	</c:if>

	<c:if test=\\"<%= !portletName.equals(myAccountPortletId) %>\\">
		<aui:script>
			var <portlet:namespace />addRoleIds = [];
			var <portlet:namespace />deleteRoleIds = [];

			var <portlet:namespace />addGroupRolesGroupIds = [];
			var <portlet:namespace />addGroupRolesRoleIds = [];
			var <portlet:namespace />deleteGroupRolesGroupIds = [];
			var <portlet:namespace />deleteGroupRolesRoleIds = [];

			function <portlet:namespace />deleteRegularRole(roleId) {
				var A = AUI();

				A.Array.removeItem(<portlet:namespace />addRoleIds, roleId);

				<portlet:namespace />deleteRoleIds.push(roleId);

				document.<portlet:namespace />fm.<portlet:namespace />addRoleIds.value = <portlet:namespace />addRoleIds.join(
					','
				);
				document.<portlet:namespace />fm.<portlet:namespace />deleteRoleIds.value = <portlet:namespace />deleteRoleIds.join(
					','
				);
			}

			function <portlet:namespace />deleteGroupRole(roleId, groupId) {
				for (var i = 0; i < <portlet:namespace />addGroupRolesRoleIds.length; i++) {
					if (
						<portlet:namespace />addGroupRolesGroupIds[i] == groupId &&
						<portlet:namespace />addGroupRolesRoleIds[i] == roleId
					) {
						<portlet:namespace />addGroupRolesGroupIds.splice(i, 1);
						<portlet:namespace />addGroupRolesRoleIds.splice(i, 1);

						break;
					}
				}

				<portlet:namespace />deleteGroupRolesGroupIds.push(groupId);
				<portlet:namespace />deleteGroupRolesRoleIds.push(roleId);

				document.<portlet:namespace />fm.<portlet:namespace />addGroupRolesGroupIds.value = <portlet:namespace />addGroupRolesGroupIds.join(
					','
				);
				document.<portlet:namespace />fm.<portlet:namespace />addGroupRolesRoleIds.value = <portlet:namespace />addGroupRolesRoleIds.join(
					','
				);
				document.<portlet:namespace />fm.<portlet:namespace />deleteGroupRolesGroupIds.value = <portlet:namespace />deleteGroupRolesGroupIds.join(
					','
				);
				document.<portlet:namespace />fm.<portlet:namespace />deleteGroupRolesRoleIds.value = <portlet:namespace />deleteGroupRolesRoleIds.join(
					','
				);
			}

			Liferay.provide(
				window,
				'<portlet:namespace />selectRole',
				function(roleId, name, searchContainer, groupName, groupId, iconCssClass) {
					var A = AUI();
					var LString = A.Lang.String;

					var searchContainerName =
						'<portlet:namespace />' + searchContainer + 'SearchContainer';

					searchContainer = Liferay.SearchContainer.get(searchContainerName);

					var rowColumns = [];

					rowColumns.push(
						'<i class=\\"' + iconCssClass + '\\"></i> ' + LString.escapeHTML(name)
					);

					if (groupName) {
						rowColumns.push(groupName);
					}

					if (groupId) {
						rowColumns.push(
							'<a class=\\"modify-link\\" data-groupId=\\"' +
								groupId +
								'\\" data-rowId=\\"' +
								roleId +
								'\\" href=\\"javascript:;\\"><%= UnicodeFormatter.toString(removeRoleIcon) %></a>'
						);

						for (
							var i = 0;
							i < <portlet:namespace />deleteGroupRolesRoleIds.length;
							i++
						) {
							if (
								<portlet:namespace />deleteGroupRolesGroupIds[i] ==
									groupId &&
								<portlet:namespace />deleteGroupRolesRoleIds[i] == roleId
							) {
								<portlet:namespace />deleteGroupRolesGroupIds.splice(i, 1);
								<portlet:namespace />deleteGroupRolesRoleIds.splice(i, 1);

								break;
							}
						}

						<portlet:namespace />addGroupRolesGroupIds.push(groupId);
						<portlet:namespace />addGroupRolesRoleIds.push(roleId);

						document.<portlet:namespace />fm.<portlet:namespace />addGroupRolesGroupIds.value = <portlet:namespace />addGroupRolesGroupIds.join(
							','
						);
						document.<portlet:namespace />fm.<portlet:namespace />addGroupRolesRoleIds.value = <portlet:namespace />addGroupRolesRoleIds.join(
							','
						);
						document.<portlet:namespace />fm.<portlet:namespace />deleteGroupRolesGroupIds.value = <portlet:namespace />deleteGroupRolesGroupIds.join(
							','
						);
						document.<portlet:namespace />fm.<portlet:namespace />deleteGroupRolesRoleIds.value = <portlet:namespace />deleteGroupRolesRoleIds.join(
							','
						);
					} else {
						rowColumns.push(
							'<a class=\\"modify-link\\" data-rowId=\\"' +
								roleId +
								'\\" href=\\"javascript:;\\"><%= UnicodeFormatter.toString(removeRoleIcon) %></a>'
						);

						A.Array.removeItem(<portlet:namespace />deleteRoleIds, roleId);

						<portlet:namespace />addRoleIds.push(roleId);

						document.<portlet:namespace />fm.<portlet:namespace />addRoleIds.value = <portlet:namespace />addRoleIds.join(
							','
						);
						document.<portlet:namespace />fm.<portlet:namespace />deleteRoleIds.value = <portlet:namespace />deleteRoleIds.join(
							','
						);
					}

					searchContainer.addRow(rowColumns, roleId);

					searchContainer.updateDataStore();
				},
				['liferay-search-container']
			);
		</aui:script>

		<aui:script use=\\"liferay-search-container\\">
			var Util = Liferay.Util;

			var searchContainer = Liferay.SearchContainer.get(
				'<portlet:namespace />rolesSearchContainer'
			);

			var searchContainerContentBox = searchContainer.get('contentBox');

			searchContainerContentBox.delegate(
				'click',
				function(event) {
					var link = event.currentTarget;

					var rowId = link.attr('data-rowId');

					var tr = link.ancestor('tr');

					var selectRegularRole = Util.getWindow(
						'<portlet:namespace />selectRegularRole'
					);

					if (selectRegularRole) {
						var selectButton = selectRegularRole.iframe.node
							.get('contentWindow.document')
							.one('.selector-button[data-entityid=\\"' + rowId + '\\"]');

						Util.toggleDisabled(selectButton, false);
					}

					searchContainer.deleteRow(tr, link.getAttribute('data-rowId'));

					<portlet:namespace />deleteRegularRole(rowId);
				},
				'.modify-link'
			);

			Liferay.on('<%= regularRoleSyncEntitiesEventName %>', function(event) {
				event.selectors.each(function(item, index, collection) {
					var roleId = item.attr('data-entityid');

					if (<portlet:namespace />deleteRoleIds.indexOf(roleId) != -1) {
						Util.toggleDisabled(item, false);
					}
				});
			});
		</aui:script>
	</c:if>
</div>"
`;

exports[`formatJSP() formatting entire fixtures view.jsp matches snapshot 1`] = `null`;

exports[`formatJSP() formatting entire fixtures view_calendar_menus.jspf matches snapshot 1`] = `
"<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String backURL = PortalUtil.getCurrentURL(request);
%>

<aui:script use=\\"aui-toggler,calendar,liferay-calendar-simple-color-picker,liferay-calendar-simple-menu,liferay-calendar-util\\">
	var calendarContainer = Liferay.component(
		'<portlet:namespace />calendarContainer'
	);

	var remoteServices = Liferay.component('<portlet:namespace />remoteServices');

	window.<portlet:namespace />calendarListsMenu = new Liferay.SimpleMenu({
		align: {
			points: [A.WidgetPositionAlign.TL, A.WidgetPositionAlign.BL]
		},
		constrain: true,
		items: [
			{
				caption: '<liferay-ui:message key=\\"add-calendar\\" />',
				fn: function(event) {
					var instance = this;

					var calendarResourceId = instance.calendarResourceId;

					if (calendarResourceId) {
						Liferay.Util.openWindow({
							dialog: {
								after: {
									destroy: function(event) {
										remoteServices.getResourceCalendars(
											calendarResourceId,
											function(calendars) {
												var calendarList =
													window
														.<portlet:namespace />calendarLists[
														calendarResourceId
													];

												calendarList.set(
													'calendars',
													calendars
												);

												<portlet:namespace />syncCalendarsMap();

												<portlet:namespace />scheduler.load();
											}
										);
									}
								},
								destroyOnHide: true,
								modal: true
							},
							refreshWindow: window,
							title: '<liferay-ui:message key=\\"add-calendar\\" />',

							<portlet:renderURL var=\\"editCalendarURL\\" windowState=\\"<%= LiferayWindowState.POP_UP.toString() %>\\">
										<portlet:param name=\\"mvcPath\\" value=\\"/edit_calendar.jsp\\" />
										<portlet:param name=\\"calendarResourceId\\" value=\\"{calendarResourceId}\\" />
									</portlet:renderURL>

							uri: Liferay.CalendarUtil.fillURLParameters(
								decodeURIComponent('<%= editCalendarURL %>'),
								{
									calendarResourceId: calendarResourceId
								}
							)
						});
					}
				},
				id: 'add'
			},
			{
				caption: '<liferay-ui:message key=\\"manage-calendars\\" />',
				fn: function(event) {
					var instance = this;

					var calendarResourceId = instance.calendarResourceId;

					if (calendarResourceId) {
						<portlet:renderURL var=\\"calendarsURL\\">
								<portlet:param name=\\"mvcPath\\" value=\\"/view_calendars.jsp\\" />
								<portlet:param name=\\"redirect\\" value=\\"<%= currentURL %>\\" />
								<portlet:param name=\\"calendarResourceId\\" value=\\"{calendarResourceId}\\" />
							</portlet:renderURL>

						window.location.href = Liferay.CalendarUtil.fillURLParameters(
							decodeURIComponent('<%= calendarsURL %>'),
							{
								calendarResourceId: calendarResourceId
							}
						);
					}
				},
				id: 'manage'
			},
			{
				caption: '<liferay-ui:message key=\\"permissions\\" />',
				fn: function(event) {
					var instance = this;

					<liferay-security:permissionsURL
							modelResource=\\"<%= CalendarConstants.RESOURCE_NAME %>\\"
							modelResourceDescription=\\"\\"
							resourcePrimKey=\\"<%= String.valueOf(scopeGroupId) %>\\"
							var=\\"permissionsURL\\"
							windowState=\\"<%= LiferayWindowState.POP_UP.toString() %>\\"
						/>

					Liferay.Util.openWindow({
						dialog: {
							destroyOnHide: true,
							modal: true
						},
						dialogIframe: {
							bodyCssClass: 'dialog-with-footer'
						},
						refreshWindow: window,
						title: '<liferay-ui:message key=\\"permissions\\" />',
						uri: decodeURIComponent('<%= permissionsURL %>')
					});
				},
				id: 'permissions'
			}
		],
		on: {
			visibleChange: function(event) {
				var instance = this;

				var hiddenItems = [];

				if (
					!(
						instance.calendarResourceId ===
						'<%= groupCalendarResource.getCalendarResourceId() %>'
					) ||
					!<%= CalendarPortletPermission.contains(permissionChecker, scopeGroupId, ActionKeys.PERMISSIONS) %>
				) {
					hiddenItems.push('permissions');
				}

				instance.set('hiddenItems', hiddenItems);
			}
		},
		visible: false,
		width: 290,
		zIndex: 500
	}).render();

	window.<portlet:namespace />calendarsMenu = {
		items: [
			{
				caption: '<liferay-ui:message key=\\"add-calendar-booking\\" />',
				fn: function(event) {
					var instance = this;

					var calendarList = instance.get('host');

					var activeCalendar = calendarList.activeItem;

					<portlet:renderURL var=\\"addCalendarBookingURL\\" windowState=\\"<%= LiferayWindowState.POP_UP.toString() %>\\">
						<portlet:param name=\\"mvcPath\\" value=\\"/edit_calendar_booking.jsp\\" />
						<portlet:param name=\\"backURL\\" value=\\"<%= backURL %>\\" />
						<portlet:param name=\\"calendarId\\" value=\\"{calendarId}\\" />
					</portlet:renderURL>

					Liferay.Util.openWindow({
						dialog: {
							after: {
								destroy: function(event) {
									<portlet:namespace />scheduler.load();
								}
							},
							destroyOnHide: true,
							modal: true
						},
						refreshWindow: window,
						title: '<liferay-ui:message key=\\"new-calendar-booking\\" />',
						uri: Liferay.CalendarUtil.fillURLParameters(
							decodeURIComponent('<%= addCalendarBookingURL %>'),
							{
								calendarId: activeCalendar.get('calendarId')
							}
						)
					});
				},
				id: 'addEvent'
			},
			{
				caption: '<liferay-ui:message key=\\"hide-calendar\\" />',
				fn: function(event) {
					var instance = this;

					var calendarList = instance.get('host');

					calendarList.remove(calendarList.activeItem);

					<portlet:namespace />refreshVisibleCalendarRenderingRules();

					instance.set('visible', false);
				},
				id: 'hide'
			},
			{
				caption: '<liferay-ui:message key=\\"calendar-settings\\" />',
				fn: function(event) {
					var instance = this;

					var calendarList = instance.get('host');

					var activeCalendar = calendarList.activeItem;

					Liferay.Util.openWindow({
						dialog: {
							after: {
								destroy: function(event) {
									remoteServices.getCalendar(
										activeCalendar.get('calendarId'),
										function(calendar) {
											var activeCalendarId = activeCalendar.get(
												'calendarId'
											);

											var calendars = calendarList
												.get('calendars')
												.map(function(item) {
													if (
														activeCalendarId ===
														item.get('calendarId')
													) {
														item = calendar;
													}

													return item;
												});

											calendarList.set(
												'calendars',
												calendars
											);

											<portlet:namespace />syncCalendarsMap();

											<portlet:namespace />scheduler.load();
										}
									);
								}
							},
							destroyOnHide: true,
							modal: true
						},
						refreshWindow: window,
						title: '<liferay-ui:message key=\\"calendar-settings\\" />',

						<portlet:renderURL var=\\"editCalendarURL\\" windowState=\\"<%= LiferayWindowState.POP_UP.toString() %>\\">
								<portlet:param name=\\"mvcPath\\" value=\\"/edit_calendar.jsp\\" />
								<portlet:param name=\\"calendarId\\" value=\\"{calendarId}\\" />
							</portlet:renderURL>

						uri: Liferay.CalendarUtil.fillURLParameters(
							decodeURIComponent('<%= editCalendarURL %>'),
							{
								calendarId: activeCalendar.get('calendarId'),
								calendarResourceId: activeCalendar.get(
									'calendarResourceId'
								)
							}
						)
					});
				},
				id: 'settings'
			},
			{
				caption: '<liferay-ui:message key=\\"permissions\\" />',
				fn: function(event) {
					var instance = this;

					var calendarList = instance.get('host');

					var activeCalendar = calendarList.activeItem;

					Liferay.Util.openWindow({
						dialog: {
							after: {
								destroy: function(event) {
									<portlet:namespace />scheduler.load();
								}
							},
							destroyOnHide: true,
							modal: true
						},
						dialogIframe: {
							bodyCssClass: 'dialog-with-footer'
						},
						refreshWindow: window,
						title: '<liferay-ui:message key=\\"permissions\\" />',

						<liferay-security:permissionsURL
								modelResource=\\"<%= Calendar.class.getName() %>\\"
								modelResourceDescription=\\"{modelResourceDescription}\\"
								resourceGroupId=\\"{resourceGroupId}\\"
								resourcePrimKey=\\"{resourcePrimKey}\\"
								var=\\"permissionsURL\\"
								windowState=\\"<%= LiferayWindowState.POP_UP.toString() %>\\"
							/>

						uri: Liferay.CalendarUtil.fillURLParameters(
							decodeURIComponent('<%= permissionsURL %>'),
							{
								modelResourceDescription: activeCalendar.get(
									'name'
								),
								resourceGroupId: activeCalendar.get('groupId'),
								resourcePrimKey: activeCalendar.get('calendarId')
							}
						)
					});
				},
				id: 'permissions'
			},
			{
				caption: '<liferay-ui:message key=\\"delete\\" />',
				fn: function(event) {
					var instance = this;

					var calendarList = instance.get('host');

					var activeCalendar = calendarList.activeItem;

					if (
						confirm(
							'<liferay-ui:message key=\\"are-you-sure-you-want-to-delete-this\\" />'
						)
					) {
						var remoteServices = Liferay.component(
							'<portlet:namespace />remoteServices'
						);

						remoteServices.deleteCalendar(
							activeCalendar.get('calendarId'),
							function() {
								remoteServices.getResourceCalendars(
									activeCalendar.get('calendarResourceId'),
									function(calendars) {
										calendarList.set('calendars', calendars);

										<portlet:namespace />syncCalendarsMap();

										<portlet:namespace />scheduler.load();

										Liferay.CalendarMessageUtil.showAlert(
											'#<portlet:namespace />alert',
											'<liferay-ui:message key=\\"the-calendar-was-deleted-successfully\\" />'
										);
									}
								);
							}
						);
					}
				},
				id: 'delete'
			},

			<c:if test=\\"<%= enableRSS %>\\">
				{
					caption: '<liferay-ui:message key=\\"rss\\" />',
					fn: function(event) {
						var instance = this;

						var calendarList = instance.get('host');

						var activeCalendar = calendarList.activeItem;

						<liferay-portlet:resourceURL id=\\"calendarBookingsRSS\\" varImpl=\\"calendarRSSURL\\">
							<portlet:param name=\\"calendarId\\" value=\\"{calendarId}\\" />
						</liferay-portlet:resourceURL>

						var url = Liferay.CalendarUtil.fillURLParameters(
							decodeURIComponent('<%= calendarRSSURL %>'),
							{
								calendarId: activeCalendar.get('calendarId')
							}
						);

						window.open(url, '_blank');

						instance.set('visible', false);
					},
					id: 'subscribe'
				},
			</c:if>

			{
				caption: '-',
				id: 'separator1'
			},
			{
				caption: '<div class=\\"calendar-portlet-color-picker\\"></div>',
				id: 'colorPicker'
			}
		],
		on: {
			visibleChange: function(event) {
				var instance = this;

				var calendarList = instance.get('host');

				var calendar = calendarList.activeItem;

				if (calendar && event.newVal) {
					var permissions = calendar.get('permissions');

					var hiddenItems = [];

					if (
						calendarList !==
						window.<portlet:namespace />otherCalendarList
					) {
						hiddenItems.push('hide');
					}

					var defaultCalendar = calendar.get('defaultCalendar');

					if (permissions.DELETE === false || defaultCalendar === true) {
						hiddenItems.push('delete');
					}

					if (permissions.MANAGE_BOOKINGS === false) {
						hiddenItems.push('addEvent');
					}

					if (permissions.PERMISSIONS === false) {
						hiddenItems.push('permissions');
					}

					if (permissions.UPDATE === false) {
						hiddenItems.push('settings');
						hiddenItems.push('separator1');
						hiddenItems.push('colorPicker');
					}

					instance.set('hiddenItems', hiddenItems);

					<portlet:namespace />colorPicker.set('host', instance);

					<portlet:namespace />colorPicker.setAttrs({
						color: calendar.get('color'),
						visible: true
					});

					var colorPickerContainer = instance
						.get('boundingBox')
						.one('.calendar-portlet-color-picker');

					colorPickerContainer.append(
						window.<portlet:namespace />colorPicker.get('boundingBox')
					);
				}
			}
		},
		width: 225
	};

	<portlet:namespace />colorPicker = new Liferay.SimpleColorPicker({
		on: {
			colorChange: function(event) {
				var instance = this;

				var simpleMenu = instance.get('host');

				if (simpleMenu) {
					var calendarList = simpleMenu.get('host');

					calendarList.activeItem.set('color', event.newVal, {
						silent: true
					});

					simpleMenu.set('visible', false);
				}
			}
		},
		visible: false
	}).render();

	A.one('#<portlet:namespace />calendarListContainer').delegate(
		'click',
		function(event) {
			var currentTarget = event.currentTarget;

			window.<portlet:namespace />calendarListsMenu.calendarResourceId = currentTarget.getAttribute(
				'data-calendarResourceId'
			);

			window.<portlet:namespace />calendarListsMenu.setAttrs({
				alignNode: currentTarget,
				toggler: currentTarget,
				visible: !window.<portlet:namespace />calendarListsMenu.get(
					'visible'
				)
			});
		},
		'.calendar-resource-arrow'
	);

	window.<portlet:namespace />toggler = new A.TogglerDelegate({
		animated: true,
		container: '#<portlet:namespace />calendarListContainer',
		content: '.calendar-portlet-calendar-list',
		header: '.calendar-portlet-list-header'
	});

	<c:if test=\\"<%= themeDisplay.isSignedIn() %>\\">
		var addOtherCalendarInput = A.one('#<portlet:namespace />addOtherCalendar');

		<liferay-portlet:resourceURL copyCurrentRenderParameters=\\"<%= false %>\\" id=\\"calendarResources\\" var=\\"calendarResourcesURL\\" />

		calendarContainer.createCalendarsAutoComplete(
			'<%= calendarResourcesURL %>',
			addOtherCalendarInput,
			function(event) {
				window.<portlet:namespace />otherCalendarList.add(event.result.raw);

				<portlet:namespace />refreshVisibleCalendarRenderingRules();

				addOtherCalendarInput.val('');
			}
		);
	</c:if>

	A.one('#<portlet:namespace />columnToggler').on('click', function(event) {
		var columnTogglerIconId = '<portlet:namespace />columnTogglerIcon';
		var columnGrid = A.one('#<portlet:namespace />columnGrid');
		var columnOptions = A.one('#<portlet:namespace />columnOptions');
		var columnTogglerIcon = A.one('#' + columnTogglerIconId);

		Liferay.Util.Session.set(
			'com.liferay.calendar.web_columnOptionsVisible',
			columnOptions.hasClass('hide')
		);

		columnGrid.toggleClass('col-md-9').toggleClass('col-md-12');

		columnOptions.toggleClass('hide');

		var newIcon = A.Node.create(
			Liferay.Util.getLexiconIconTpl(
				columnTogglerIcon._node.classList.contains(
					'lexicon-icon-caret-left'
				)
					? 'caret-right'
					: 'caret-left'
			)
		);

		newIcon.attr('id', columnTogglerIconId);

		columnTogglerIcon.replace(newIcon);
	});

	window.<portlet:namespace />refreshMiniCalendarSelectedDates = function() {
		<portlet:namespace />miniCalendar._clearSelection();

		var activeView = <portlet:namespace />scheduler.get('activeView');
		var viewDate = <portlet:namespace />scheduler.get('viewDate');

		var viewName = activeView.get('name');

		var total = 1;

		if (viewName == 'month') {
			total = A.Date.daysInMonth(viewDate);
		} else if (viewName == 'week') {
			total = 7;
		}

		var selectedDates = Liferay.CalendarUtil.getDatesList(viewDate, total);

		<portlet:namespace />miniCalendar.selectDates(selectedDates);

		var todayDate = <portlet:namespace />scheduler.get('todayDate');

		if (
			selectedDates.length > 0 &&
			DateMath.between(todayDate, selectedDates[0], selectedDates[total - 1])
		) {
			viewDate = todayDate;
		}

		<portlet:namespace />miniCalendar.set('date', viewDate);
	};

	var DateMath = A.DataType.DateMath;

	window.<portlet:namespace />refreshVisibleCalendarRenderingRules = function() {
		var miniCalendarStartDate = DateMath.subtract(
			DateMath.toMidnight(
				window.<portlet:namespace />miniCalendar.get('date')
			),
			DateMath.WEEK,
			1
		);

		var miniCalendarEndDate = DateMath.add(
			DateMath.add(
				window.<portlet:namespace />miniCalendar.get('date'),
				DateMath.MONTH,
				1
			),
			DateMath.WEEK,
			1
		);

		miniCalendarEndDate.setHours(23, 59, 59, 999);

		remoteServices.getCalendarRenderingRules(
			A.Object.keys(calendarContainer.get('visibleCalendars')),
			Liferay.CalendarUtil.toUTC(miniCalendarStartDate),
			Liferay.CalendarUtil.toUTC(miniCalendarEndDate),
			'busy',
			function(rulesDefinition) {
				var selectedDates = <portlet:namespace />miniCalendar._getSelectedDatesList();

				window.<portlet:namespace />miniCalendar.set('customRenderer', {
					filterFunction: function(date, node, rules) {
						node.addClass('lfr-busy-day');

						DateMath.toMidnight(date);

						var selected =
							selectedDates.length > 0 &&
							A.Date.isInRange(
								date,
								selectedDates[0],
								selectedDates[selectedDates.length - 1]
							);

						if (A.DataType.DateMath.isToday(date)) {
							node.addClass('lfr-current-day');
						}

						node.toggleClass('yui3-calendar-day-selected', selected);
					},
					rules: rulesDefinition
				});

				<portlet:namespace />miniCalendar.selectDates(selectedDates);
			}
		);
	};

	window.<portlet:namespace />miniCalendar = new A.Calendar({
		after: {
			dateChange: <portlet:namespace />refreshVisibleCalendarRenderingRules,
			dateClick: function(event) {
				<portlet:namespace />scheduler.setAttrs({
					date: event.date
				});
			}
		},
		date: new Date(<%= String.valueOf(date) %>),
		headerRenderer:
			'<%= HtmlUtil.escapeJS(LanguageUtil.get(request, \\"b-y\\")) %>',
		locale: '<%= themeDisplay.getLocale() %>',
		'strings.first_weekday': <%= weekStartsOn %>
	}).render('#<portlet:namespace />miniCalendarContainer');

	<portlet:namespace />scheduler.after(
		['*:add', '*:change', '*:load', '*:remove', '*:reset'],
		A.debounce(<portlet:namespace />refreshVisibleCalendarRenderingRules, 100)
	);

	<portlet:namespace />scheduler.after(
		['activeViewChange', 'dateChange'],
		<portlet:namespace />refreshMiniCalendarSelectedDates
	);

	<portlet:namespace />refreshVisibleCalendarRenderingRules();
	<portlet:namespace />refreshMiniCalendarSelectedDates();
</aui:script>
"
`;

exports[`formatJSP() formatting entire fixtures view_meeting.jsp matches snapshot 1`] = `
"<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%@ include file=\\"/init.jsp\\" %>

<%
String backURL = ParamUtil.getString(request, \\"backURL\\");

long powwowMeetingId = ParamUtil.getLong(request, \\"powwowMeetingId\\");

PowwowMeeting powwowMeeting = PowwowMeetingLocalServiceUtil.fetchPowwowMeeting(powwowMeetingId);
%>

<liferay-util:html-bottom>
	<script src=\\"<%= HttpUtil.getProtocol(request) %>://cdnjs.cloudflare.com/ajax/libs/zeroclipboard/2.1.6/ZeroClipboard.js\\" type=\\"text/javascript\\"></script>
</liferay-util:html-bottom>

<liferay-ui:header
	backURL=\\"<%= backURL %>\\"
	title=\\"meeting-info\\"
/>

<div class=\\"meeting-container\\">
	<div id=\\"<portlet:namespace />errorMessage\\"></div>

	<%
	boolean displayMeetingActions = true;
	%>

	<%@ include file=\\"/meetings/meeting_body.jspf\\" %>

	<div class=\\"meeting-url\\">
		<dt>
			<liferay-ui:message key=\\"meeting-url\\" />
		</dt>
		<dd>
			<input id=\\"<portlet:namespace />meetingURL\\" readonly=\\"readonly\\" type=\\"text\\" value=\\"<%= PowwowUtil.getInvitationURL(powwowMeetingId, null, request) %>\\" />

			<button class=\\"zeroclipboard-button\\" data-clipboard-text=\\"<%= PowwowUtil.getInvitationURL(powwowMeetingId, null, request) %>\\" data-copied=\\"<liferay-ui:message key=\\"copied\\" />\\" data-hover=\\"<liferay-ui:message key=\\"copy-to-clipboard\\" />\\" id=\\"<portlet:namespace />copyButton\\">
				<i class=\\"icon-copy\\"></i>
			</button>
		</dd>
	</div>

	<c:if test=\\"<%= PowwowServiceProviderUtil.isSupportsOptionPassword(powwowMeeting.getProviderType()) %>\\">
		<c:if test=\\"<%= Validator.isNotNull(PowwowServiceProviderUtil.getOptionPassword(powwowMeeting.getPowwowMeetingId())) %>\\">
			<div class=\\"meeting-password\\">
				<dt>
					<liferay-ui:message key=\\"meeting-password\\" />
				</dt>
				<dd>
					<%= PowwowServiceProviderUtil.getOptionPassword(powwowMeeting.getPowwowMeetingId()) %>
				</dd>
			</div>
		</c:if>
	</c:if>

	<c:if test=\\"<%= PowwowServiceProviderUtil.isSupportsJoinByPhone(powwowMeeting.getProviderType()) %>\\">
		<div class=\\"join-by-phone\\">
			<dt>
				<liferay-ui:message key=\\"join-by-phone\\" />
			</dt>

			<%
			String joinByPhoneDefaultNumbersString = StringPool.BLANK;

			List<String> joinByPhoneDefaultNumbers = PowwowServiceProviderUtil.getJoinByPhoneDefaultNumbers(powwowMeeting.getProviderType());

			if ((joinByPhoneDefaultNumbers != null) && !joinByPhoneDefaultNumbers.isEmpty()) {
				joinByPhoneDefaultNumbersString = StringUtil.merge(joinByPhoneDefaultNumbers, StringPool.SPACE + LanguageUtil.get(request, \\"or\\") + StringPool.SPACE);
			}
			%>

			<dd>
				<div class=\\"join-by-phone-content\\">
					<div class=\\"default-number\\">
						<i class=\\"icon-phone\\"></i><span class=\\"title\\"><liferay-ui:message key=\\"dial\\" />:</span> <%= joinByPhoneDefaultNumbersString %>
					</div>

					<div class=\\"access-code\\">
						<span class=\\"title\\"><%= LanguageUtil.get(request, PowwowServiceProviderUtil.getJoinByPhoneAccessCodeLabel(powwowMeeting.getProviderType())) %>:</span> <%= PowwowServiceProviderUtil.getJoinByPhoneAccessCode(powwowMeetingId) %>
					</div>

					<div class=\\"international-numbers-toggler\\" id=\\"<portlet:namespace />internationalNumbersToggler\\">
						<div class=\\"international-numbers-header toggler-header-collapsed\\">
							<liferay-ui:message key=\\"international-numbers\\" />
						</div>

						<div class=\\"international-numbers-content toggler-content-collapsed\\">
							<div id=\\"<portlet:namespace />internationalNumbersTable\\"></div>
						</div>
					</div>
				</div>
			</dd>
		</div>
	</c:if>

	<div class=\\"provider\\">
		<dt>
			<liferay-ui:message key=\\"provider\\" />
		</dt>
		<dd>
			<%= LanguageUtil.get(request, PowwowServiceProviderUtil.getBrandingLabel(powwowMeeting.getProviderType())) %>
		</dd>
	</div>

	<div class=\\"participants\\">
		<dt>
			<liferay-ui:message key=\\"participants\\" />
		</dt>
		<dd>
			<liferay-ui:search-container
				total=\\"<%= PowwowParticipantLocalServiceUtil.getPowwowParticipantsCount(powwowMeetingId) %>\\"
			>
				<liferay-ui:search-container-results>

					<%
					searchContainer.setResults(PowwowParticipantLocalServiceUtil.getPowwowParticipants(powwowMeetingId));
					%>

				</liferay-ui:search-container-results>

				<liferay-ui:search-container-row
					className=\\"com.liferay.powwow.model.PowwowParticipant\\"
					escapedModel=\\"<%= true %>\\"
					keyProperty=\\"powwowParticipantId\\"
					modelVar=\\"powwowParticipant\\"
				>

					<%
					String displayName = powwowParticipant.getName();

					if (powwowParticipant.getType() == PowwowParticipantConstants.TYPE_HOST) {
						displayName = LanguageUtil.format(request, \\"x-host\\", displayName);
					}
					%>

					<liferay-ui:search-container-column-text
						name=\\"name\\"
						value=\\"<%= displayName %>\\"
					/>

					<liferay-ui:search-container-column-text
						name=\\"email-address\\"
						property=\\"emailAddress\\"
					/>
				</liferay-ui:search-container-row>

				<liferay-ui:search-iterator />
			</liferay-ui:search-container>
		</dd>
	</div>
</div>

<aui:script use=\\"aui-base,aui-datatable,aui-toggler,swfdetect\\">
	var copyButton = A.one('#<portlet:namespace />copyButton');

	if (A.SWFDetect.isFlashVersionAtLeast(11, 0, 0) && copyButton) {
		var client = new ZeroClipboard(
			document.getElementById('<portlet:namespace />copyButton')
		);

		client.on('error', function(event) {
			ZeroClipboard.destroy();
		});

		client.on('ready', function(readyEvent) {
			client.on('aftercopy', function(event) {
				copyButton.addClass('copied');
			});
		});

		copyButton.on('mouseout', function() {
			copyButton.removeClass('copied');
		});
	} else {
		if (copyButton) {
			copyButton.hide();
		}

		var meetingURLInput = A.one('#<portlet:namespace />meetingURL');

		if (meetingURLInput) {
			meetingURLInput.removeAttribute('readonly');

			meetingURLInput.addClass('only');
		}
	}

	<c:if test=\\"<%= PowwowServiceProviderUtil.isSupportsJoinByPhone(powwowMeeting.getProviderType()) %>\\">
		new A.Toggler({
			animated: true,
			container: '#<portlet:namespace />internationalNumbersToggler',
			content: '.international-numbers-content',
			expanded: false,
			header: '.international-numbers-header'
		});

		//Load global phone numbers

		var columns = [
			{
				key: 'lcountry',
				label: 'country'
			},
			{
				key: 'lphone',
				label: 'phone'
			},
			{
				key: 'rcountry',
				label: 'country'
			},
			{
				key: 'rphone',
				label: 'phone'
			}
		];

		var interationalNumbersDisplay = [];

		<%
		Map<String, List<String>> internationalNumbers = PowwowServiceProviderUtil.getJoinByPhoneInternationalNumbers(powwowMeeting.getProviderType());

		if ((internationalNumbers != null) && !internationalNumbers.isEmpty()) {
			for (String country : internationalNumbers.keySet()) {
				for (String number : internationalNumbers.get(country)) {
		%>

		interationalNumbersDisplay.push({
			country: '<%= country %>',
			number: '<%= number %>'
		});

		<%
				}
			}
		}
		%>

		var halfInterationalNumbersDisplay = Math.round(
			interationalNumbersDisplay.length / 2
		);

		var dataLeft = interationalNumbersDisplay.slice(
			0,
			halfInterationalNumbersDisplay
		);
		var dataRight = interationalNumbersDisplay.slice(
			halfInterationalNumbersDisplay
		);

		var data = [];

		for (var i = 0; i < dataLeft.length; i++) {
			var rcountry = '';
			var rphone = '';

			if (dataRight[i] != undefined) {
				rcountry = dataRight[i].country;
				rphone = dataRight[i].number;
			}

			data.push({
				lcountry: dataLeft[i].country,
				lphone: dataLeft[i].number,
				rcountry: rcountry,
				rphone: rphone
			});
		}

		new A.DataTable({
			className: 'table table-bordered',
			columns: columns,
			data: data
		}).render('#<portlet:namespace />internationalNumbersTable');
	</c:if>
</aui:script>"
`;
